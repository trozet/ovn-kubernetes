# THIS FILE IS AUTOMATICALLY GENERATED
# DO NOT EDIT
---
name: Go
'on':
- push
- pull_request
env:
  K8S_VERSION: v1.16.4
  KIND_CLUSTER_NAME: ovn
  KIND_INSTALL_INGRESS: true
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Build
      run: |
        set -x
        go get golang.org/x/tools/cmd/cover
        pushd go-controller
           make
           make windows
           COVERALLS=1 make check
        popd
        pushd dist/images
           if [ -n "$(git diff --stat origin/master.. | grep dist/images/Dockerfile)" ]; then make all; fi
        popd

        # Combine separate code coverage profiles into one
        go get github.com/modocache/gover
        gover go-controller/ gover.coverprofile

        # Convert coverage profile to LCOV format for coveralls github action
        go get github.com/jandelgado/gcov2lcov
        mkdir -p src/github.com/ovn-org
        ln -sf $(pwd) src/github.com/ovn-org/ovn-kubernetes
        GOPATH=$(pwd) gcov2lcov -infile gover.coverprofile -outfile coverage.lcov
    - name: Submit code coverage to Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        path-to-lcov: coverage.lcov
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Verify
      run: |
        pushd go-controller
           make gofmt
           make install.tools
           make lint
        popd
  k8s:
    name: Build k8s
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
      if: steps.cache-k8s.outputs.cache-hit != 'true'
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
  e2e-shard-n:
    name: e2e-kind-ovn-shard-n-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: k8s
    strategy:
      matrix:
        config:
        - ha: 'false'
          name: noHA
        - ha: 'true'
          name: HA
    env:
      KIND_HA: "${{matrix.config.ha}}"
      JOB_NAME: e2e-shard-n
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
    - name: kind setup
      run: |
        set -x

        export GO111MODULE="on"
        mkdir -p $GOPATH/bin
        curl -fs https://chunk.io/trozet/ba750701d0af4e2b94b249ab9de27b50 -o $GOPATH/bin/kubetest
        chmod +x $GOPATH/bin/kubetest

        pushd $GOPATH/src/k8s.io/kubernetes/
        sudo ln ./_output/local/go/bin/kubectl /usr/local/bin/kubectl
        popd

        GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
        pushd contrib
        ./kind.sh
        popd
    - name: e2e-kind-ovn-shard-n
      run: |
        pushd $GOPATH/src/k8s.io/kubernetes/
        export KUBERNETES_CONFORMANCE_TEST=y
        export KUBECONFIG=${HOME}/admin.conf
        export MASTER_NAME=${KIND_CLUSTER_NAME}-control-plane
        export NODE_NAMES=${MASTER_NAME}

        # all tests that don't have P as their sixth letter after the N
        kubetest --provider=local --deployment=kind --kind-cluster-name=${KIND_CLUSTER_NAME} --test --test_args='--num-nodes=3 --ginkgo.focus=\[sig-network\]\s[Nn](.{6}[^Pp].*|.{0,6}$) --disable-log-dump=false --ginkgo.skip=Networking\sIPerf\sIPv[46]|\[Feature:PerformanceDNS\]|\[Feature:IPv6DualStackAlphaFeature\]|NetworkPolicy\sbetween\sserver\sand\sclient.+(ingress\saccess|multiple\segress\spolicies|allow\segress\saccess)|\[Feature:NoSNAT\]|Services.+(ESIPP|cleanup\sfinalizer|session\saffinity)|\[Feature:Networking-IPv6\]|\[Feature:Federation\]|configMap\snameserver|ClusterDns\s\[Feature:Example\]|(Namespace|Pod)Selector\s\[Feature:NetworkPolicy\]|kube-proxy|should\sset\sTCP\sCLOSE_WAIT\stimeout'
    - name: Export logs
      if: always()
      run: "mkdir -p /tmp/kind/logs \nkind export logs --name ${KIND_CLUSTER_NAME}
        /tmp/kind/logs\n"
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: kind-logs-${{ github.run_id }}-${{ env.JOB_NAME }}
        path: "/tmp/kind/logs"
  e2e-shard-np:
    name: e2e-kind-ovn-shard-np-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: k8s
    strategy:
      matrix:
        config:
        - ha: 'false'
          name: noHA
        - ha: 'true'
          name: HA
    env:
      JOB_NAME: e2e-shard-np
      KIND_HA: "${{matrix.config.ha}}"
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
    - name: kind setup
      run: |
        set -x

        export GO111MODULE="on"
        mkdir -p $GOPATH/bin
        curl -fs https://chunk.io/trozet/ba750701d0af4e2b94b249ab9de27b50 -o $GOPATH/bin/kubetest
        chmod +x $GOPATH/bin/kubetest

        pushd $GOPATH/src/k8s.io/kubernetes/
        sudo ln ./_output/local/go/bin/kubectl /usr/local/bin/kubectl
        popd

        GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
        pushd contrib
        ./kind.sh
        popd
    - name: e2e-kind-ovn-shard-np
      run: |
        pushd $GOPATH/src/k8s.io/kubernetes/
        export KUBERNETES_CONFORMANCE_TEST=y
        export KUBECONFIG=${HOME}/admin.conf
        export MASTER_NAME=${KIND_CLUSTER_NAME}-control-plane
        export NODE_NAMES=${MASTER_NAME}
        # all tests that have P as the sixth letter after the N
        kubetest --provider=local --deployment=kind --kind-cluster-name=${KIND_CLUSTER_NAME} --test --test_args='--num-nodes=3 --ginkgo.focus=\[sig-network\]\s[Nn].{6}[Pp].*$ --disable-log-dump=false --ginkgo.skip=Networking\sIPerf\sIPv[46]|\[Feature:PerformanceDNS\]|\[Feature:IPv6DualStackAlphaFeature\]|NetworkPolicy\sbetween\sserver\sand\sclient.+(ingress\saccess|multiple\segress\spolicies|allow\segress\saccess)|\[Feature:NoSNAT\]|Services.+(ESIPP|cleanup\sfinalizer|session\saffinity)|\[Feature:Networking-IPv6\]|\[Feature:Federation\]|configMap\snameserver|ClusterDns\s\[Feature:Example\]|(Namespace|Pod)Selector\s\[Feature:NetworkPolicy\]|kube-proxy|should\sset\sTCP\sCLOSE_WAIT\stimeout'
    - name: Export logs
      if: always()
      run: "mkdir -p /tmp/kind/logs \nkind export logs --name ${KIND_CLUSTER_NAME}
        /tmp/kind/logs\n"
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: kind-logs-${{ github.run_id }}-${{ env.JOB_NAME }}
        path: "/tmp/kind/logs"
  e2e-shard-s:
    name: e2e-kind-ovn-shard-s-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: k8s
    strategy:
      matrix:
        config:
        - ha: 'false'
          name: noHA
        - ha: 'true'
          name: HA
    env:
      JOB_NAME: e2e-shard-s
      KIND_HA: "${{matrix.config.ha}}"
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
    - name: kind setup
      run: |
        set -x

        export GO111MODULE="on"
        mkdir -p $GOPATH/bin
        curl -fs https://chunk.io/trozet/ba750701d0af4e2b94b249ab9de27b50 -o $GOPATH/bin/kubetest
        chmod +x $GOPATH/bin/kubetest

        pushd $GOPATH/src/k8s.io/kubernetes/
        sudo ln ./_output/local/go/bin/kubectl /usr/local/bin/kubectl
        popd

        GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
        pushd contrib
        ./kind.sh
        popd
    - name: e2e-kind-ovn-shard-s
      run: |
        pushd $GOPATH/src/k8s.io/kubernetes/
        export KUBERNETES_CONFORMANCE_TEST=y
        export KUBECONFIG=${HOME}/admin.conf
        export MASTER_NAME=${KIND_CLUSTER_NAME}-control-plane
        export NODE_NAMES=${MASTER_NAME}
        kubetest --provider=local --deployment=kind --kind-cluster-name=${KIND_CLUSTER_NAME} --test --test_args='--num-nodes=3 --ginkgo.focus=\[sig-network\]\s[Ss].* --disable-log-dump=false --ginkgo.skip=Networking\sIPerf\sIPv[46]|\[Feature:PerformanceDNS\]|\[Feature:IPv6DualStackAlphaFeature\]|NetworkPolicy\sbetween\sserver\sand\sclient.+(ingress\saccess|multiple\segress\spolicies|allow\segress\saccess)|\[Feature:NoSNAT\]|Services.+(ESIPP|cleanup\sfinalizer|session\saffinity)|\[Feature:Networking-IPv6\]|\[Feature:Federation\]|configMap\snameserver|ClusterDns\s\[Feature:Example\]|(Namespace|Pod)Selector\s\[Feature:NetworkPolicy\]|kube-proxy|should\sset\sTCP\sCLOSE_WAIT\stimeout'
    - name: Export logs
      if: always()
      run: "mkdir -p /tmp/kind/logs \nkind export logs --name ${KIND_CLUSTER_NAME}
        /tmp/kind/logs\n"
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: kind-logs-${{ github.run_id }}-${{ env.JOB_NAME }}
        path: "/tmp/kind/logs"
  e2e-shard-other:
    name: e2e-kind-ovn-shard-other-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: k8s
    strategy:
      matrix:
        config:
        - ha: 'false'
          name: noHA
        - ha: 'true'
          name: HA
    env:
      JOB_NAME: e2e-shard-other
      KIND_HA: "${{matrix.config.ha}}"
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
    - name: kind setup
      run: |
        set -x

        export GO111MODULE="on"
        mkdir -p $GOPATH/bin
        curl -fs https://chunk.io/trozet/ba750701d0af4e2b94b249ab9de27b50 -o $GOPATH/bin/kubetest
        chmod +x $GOPATH/bin/kubetest

        pushd $GOPATH/src/k8s.io/kubernetes/
        sudo ln ./_output/local/go/bin/kubectl /usr/local/bin/kubectl
        popd

        GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
        pushd contrib
        ./kind.sh
        popd
    - name: e2e-kind-ovn-shard-other
      run: |
        pushd $GOPATH/src/k8s.io/kubernetes/
        export KUBERNETES_CONFORMANCE_TEST=y
        export KUBECONFIG=${HOME}/admin.conf
        export MASTER_NAME=${KIND_CLUSTER_NAME}-control-plane
        export NODE_NAMES=${MASTER_NAME}
        kubetest --provider=local --deployment=kind --kind-cluster-name=${KIND_CLUSTER_NAME} --test --test_args='--num-nodes=3 --ginkgo.focus=\[sig-network\]\s[^NnSs].* --disable-log-dump=false --ginkgo.skip=Networking\sIPerf\sIPv[46]|\[Feature:PerformanceDNS\]|\[Feature:IPv6DualStackAlphaFeature\]|NetworkPolicy\sbetween\sserver\sand\sclient.+(ingress\saccess|multiple\segress\spolicies|allow\segress\saccess)|\[Feature:NoSNAT\]|Services.+(ESIPP|cleanup\sfinalizer|session\saffinity)|\[Feature:Networking-IPv6\]|\[Feature:Federation\]|configMap\snameserver|ClusterDns\s\[Feature:Example\]|(Namespace|Pod)Selector\s\[Feature:NetworkPolicy\]|kube-proxy|should\sset\sTCP\sCLOSE_WAIT\stimeout'
    - name: Export logs
      if: always()
      run: "mkdir -p /tmp/kind/logs \nkind export logs --name ${KIND_CLUSTER_NAME}
        /tmp/kind/logs\n"
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: kind-logs-${{ github.run_id }}-${{ env.JOB_NAME }}
        path: "/tmp/kind/logs"
  e2e-control-plane:
    name: e2e-control-plane-${{ matrix.config.name }}
    runs-on: ubuntu-latest
    needs: k8s
    strategy:
      matrix:
        config:
        - ha: 'false'
          name: noHA
        - ha: 'true'
          name: HA
    env:
      JOB_NAME: e2e-control-plane
      KIND_HA: "${{matrix.config.ha}}"
    steps:
    - name: Free up disk space
      run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-*
        mono-* msbuild php-* php7* ghc-* zulu-*
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Set up environment
      run: |
        export GOPATH=$(go env GOPATH)
        echo "::set-env name=GOPATH::$GOPATH"
        export PATH=$GOPATH/bin:$PATH
        echo "::add-path::$GOPATH/bin"
    - name: Cache Kubernetes
      id: cache-k8s
      uses: actions/cache@v1
      with:
        path: "${{ env.GOPATH }}/src/k8s.io/kubernetes/"
        key: k8s-go-2-${{ env.K8S_VERSION }}
    - name: Build and install Kubernetes
      if: steps.cache-k8s.outputs.cache-hit != 'true'
      run: |
        set -x
        git clone --single-branch --branch $K8S_VERSION https://github.com/kubernetes/kubernetes.git $GOPATH/src/k8s.io/kubernetes/
        pushd $GOPATH/src/k8s.io/kubernetes/
        make WHAT="test/e2e/e2e.test vendor/github.com/onsi/ginkgo/ginkgo cmd/kubectl"
        rm -rf .git
    - name: kind setup
      run: |
        set -x

        export GO111MODULE="on"
        mkdir -p $GOPATH/bin
        curl -fs https://chunk.io/trozet/ba750701d0af4e2b94b249ab9de27b50 -o $GOPATH/bin/kubetest
        chmod +x $GOPATH/bin/kubetest

        pushd $GOPATH/src/k8s.io/kubernetes/
        sudo ln ./_output/local/go/bin/kubectl /usr/local/bin/kubectl
        popd

        GO111MODULE="on" go get sigs.k8s.io/kind@v0.7.0
        pushd contrib
        ./kind.sh
        popd
    - name: e2e-control-plane
      run: |
        set -x
        pushd test/e2e
        go mod download
        popd
        pushd $GOPATH/src/k8s.io/kubernetes/
        export KUBERNETES_CONFORMANCE_TEST=y
        export KUBECONFIG=${HOME}/admin.conf
        export MASTER_NAME=${KIND_CLUSTER_NAME}-control-plane
        export NODE_NAMES=${MASTER_NAME}

        sed -E -i 's/"\$\{ginkgo\}" "\$\{ginkgo_args\[\@\]\:\+\$\{ginkgo_args\[\@\]\}\}" "\$\{e2e_test\}"/pushd \$GITHUB_WORKSPACE\/test\/e2e\nGO111MODULE=on "\$\{ginkgo\}" "\$\{ginkgo_args\[\@\]\:\+\$\{ginkgo_args\[\@\]\}\}"/' hack/ginkgo-e2e.sh

        kubetest --provider=local --deployment=kind --kind-cluster-name=kind-ovn --test --test_args='--num-nodes=3 --disable-log-dump=false'
    - name: Export logs
      if: always()
      run: "mkdir -p /tmp/kind/logs \nkind export logs --name ${KIND_CLUSTER_NAME}
        /tmp/kind/logs\n"
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: kind-logs-${{ github.run_id }}-${{ env.JOB_NAME }}
        path: "/tmp/kind/logs"
